/*
ID: fzhpand1
PROG: beads
LANG: C++
*/
#include<iostream>
#include<fstream>
#include<vector>
using namespace std;

int find_place(char* a, int N,int i)
{
	for(int j=i;j<N;j++)
	{
	   if(a[j] != a[i]) {return j;}

	}
	return N;

}

void change_to(char* a, int i1,int i2, char c)
{
	for(int i=i1;i<i2;i++)
	   a[i] = c;

}
int main()
{
	ifstream d1("beads.in");
	int N;
	d1>>N;
	char a[2*N];
	char x;
	for(int i=0;i<N;i++)
	{ 
	   d1>>x;
	   a[i] = a[i+N] = x;
	}
/*
	for(int i=0;i<2*N;i++)
	{
	   cout<<a[i]<<" ";

	}

cout<<endl<<endl;
*/
	
	//first scan, we will change 'w' into 'r' or 'b' as many as possible
	int i=0;
	while(i<2*N)
	{
	   if(a[i] == 'w')
	   {
		int i1 = find_place(a,2*N,i);
		if(i==0) 
		{
		   if(i1<2*N) 
		   {
			change_to(a,i,i1,a[i1]);
		   }
		   

		}
		else
		{	
		   if(i1<2*N && a[i-1] == a[i1]) change_to(a,i,i1,a[i1]);
		   else if(i1 == 2*N)  change_to(a,i,i1,a[i-1]);

		}
		i = i1+1;
	   }
	   else i++;

	}
/*
	for(int i=0;i<2*N;i++)
	{
	   cout<<a[i]<<" ";

	}
*/
	// now check out the longest 2 consecutive colors
	
	vector<int> color;
	vector<int> white;
	int temp;
	i = 0;
	while(i<2*N)
	{
	   int i1 = find_place(a,2*N,i);
	   if(i1<2*N) 
	   { 
	    	
		temp = i1-i; 
		if(a[i] == 'w') white.push_back(temp);
		else 	
		{
		   color.push_back(temp);
		   if(a[i1] != 'w') white.push_back(0);
		} 
		i= i1;
	   }  
	   else {temp = 2*N - i -1; i = 2*N; color.push_back(temp);}

	}

	int max;
	int size = 0;
	if(color.size() == 1) { max = N; }
	else{

	for(int i=0;i<color.size()-1;i++)
	{
	   
	   if(i==0)
	   {
		size = color[i] + color[i+1] + white[i] + white[i+1]; 	
	 	max = size;

	   }
	   else if(i+1 == color.size()-1)
	   {
		size = color[i] + color[i+1] + white[i];
		if(max < size && size<N+1) max = size;

	   }
	   else
	   {
		size = color[i] + color[i+1] + 
			white[i-1] + white[i] + white[i+1];
		if(max <size && size<N+1) max = size;

	   }

	}
	}
	
/*
for(vector<int>::size_type i=0;i<color.size();i++) 
{cout<<"color["<<i<<"]= "<<color[i]<<endl;
if(i != color.size()-1) cout<<"white["<<i<<"]="<<white[i]<<endl;
}
*/
	ofstream d2("beads.out");
	d2<<max<<endl;
	return 0;
}


