/*
ID: fzhpand1
PROG: calfflac
LANG: C++
*/ 
#include<iostream>
#include<algorithm>
#include<fstream>
#include<vector>
using namespace std;

class range{
public:
	int st;
	int en;
	int len;
	range(int a,int b)
	{ st = a; en = b; len = b-a;}
};

bool compare(range i, range j)
{
	if(i.len>j.len) return 1;
	else if(i.len == j.len) return (i.st<j.st);
	else return 0;
}

void middle_symetry(string& s,int i,int mid,int j,int& start,int& end)
{
	int ran = min(mid-i,j-mid);
	int k;
	for(k=0;k<ran;k++)
	{
		if(s[mid-k-1] != s[mid+k+1])
			break;
	}
	start = mid-k; 
	end = mid+k;
	/*
	if(start != end)
	{
			for(int i=start;i<=end;i++)
					cout<<s[i];
			cout<<endl;
	}
	*/
	//cout<<"start = "<<start<<" end ="<<end<<endl;
	return; 
}

int check_symetry(string&s, int i, int j)
{
	int st,en;
	en = j;
	for(st=i;st<=en;st++,en--)
	{
		if(s[st] != s[en]) return 0;
	}
	return 1;
}

void extend(string& s, int& i,int& j,int& a, int& b)
{
	if(check_symetry(s,a,b) == 1)
	{
/*
					for(int i=a;i<=b;i++)
							cout<<s[i];
					cout<<endl;
					cout<<"before extend check is "<<check_symetry(s,a,b)<<endl;
*/
			while(a>i && b<j)	
			{
					if(s[a-1] == s[b+1])
					{ a--; b++; }
					else 	
					{ break; }
			}
/*
			if(a != b)
			{
					for(int i=a;i<=b;i++)
							cout<<s[i];
					cout<<endl;
					cout<<"after extend check is "<<check_symetry(s,a,b)<<endl;
			}
*/
	}
//	else cout<<"there is bad check = "<<check_symetry(s,a,b)<<endl;
	return;	
}

void left_symetry(string& s, int i,int mid,int j,int& start,int& end)
{
	vector<range> rs;	
	for(int k=0;k<mid-i;k++)
	{
		if(s[mid-k-1] == s[mid]) 
		{
			if(check_symetry(s,mid-k-1,mid) == 1)
			{
				int a,b;	
				a = mid-k-1; b = mid;
				extend(s,i,j,a,b);
				range *tmp = new range(a,b);
				rs.push_back(*tmp);
			}
		}
	}
	sort(rs.begin(),rs.end(),compare); //sorted in decreasing order
	if(rs.size() != 0)
	{
		start = rs[0].st;
		end = rs[0].en;	
	}
	else 
	{ start = end = mid; }
/*
	if(start != end)
	{
			for(int i=start;i<=end;i++)
					cout<<s[i];
			cout<<endl;
	}
*/
	return;
}


void right_symetry(string& s, int i,int mid,int j,int& start,int& end)
{
	vector<range> rs;	
	for(int k=0;k<j-mid;k++)
	{
		if(s[mid+k+1] == s[mid]) 
		{
			if(check_symetry(s,mid,mid+k+1) == 1)
			{
				int a,b;	
				b = mid+k+1; a = mid;
				extend(s,i,j,a,b);
				range *tmp = new range(a,b);
				rs.push_back(*tmp);
			//cout<<"check is "<<check_symetry(s,a,b)<<endl;
			}
		}
	}
	sort(rs.begin(),rs.end(),compare); //sorted in decreasing order
	if(rs.size() != 0)
	{
		start = rs[0].st;
		end = rs[0].en;	
	}
	else 
	{ start = end = mid; }
/*
	if(start != end)
	{
			for(int i=start;i<=end;i++)
					cout<<s[i];
			cout<<endl;
	}
*/
	return;
}

void find_cross_pal(string& s,int i,int j,int& start, int& end)
{
	int mid = (i+j)/2;
	int s1,e1,s2,e2,s3,e3,l1,l2,l3;
	s1 = e1 = s2 = e2 = s3 = e3 = l1 = l2 = l3 = 0;
	middle_symetry(s,i,mid,j,s1,e1); l1 = e1 - s1;
	left_symetry(s,i,mid,j,s2,e2); l2 = e2 - s2;
	right_symetry(s,i,mid,j,s3,e3); l3 = e3 - s3;
	//cout<<"l1 = "<<l1<<" l2="<<l2<<" l3="<<l3<<endl;
	//int k=//max(l1, l2);
	//k = max(k,l3);
	int k = max(max(l1,l2),l3);
	//cout<<"k="<<k<<endl;
	if(l2 == k) {start = s2; end = e2;return;}
	else if(l1 == k) {start = s1; end = e1;return;}
	else if(l3 == k) {start = s3; end = e3;return;}
/*
	if(k>0) 
	{
		for(int i=start;i<end;i++)
		cout<<s[i];
		cout<<endl;
	}
*/
	//cout<<"start = "<<start<<" end="<<end<<endl;
}

void find_longest_pal(string& s,int i, int j, int& start, int& end)
{
	if(i==j) { start = end = i; return; } 
	else
	{
		int mid = (i+j)/2;
		int s1,e1,s2,e2,s3,e3,l1,l2,l3;
		s1 = s2 = e1 = e2 = s3 = e3 = 0;
		find_longest_pal(s,i,mid,s1,e1); l1 = e1 - s1;
		find_longest_pal(s,mid+1,j,s2,e2); l2 = e2 - s2;
		find_cross_pal(s,i,j,s3,e3); l3 = e3 - s3;
		//cout<<"l3 = "<<l3<<endl;
		int k = max(max(l1,l2),l3);
		if(l1 == k) {start = s1; end = e1;return;}
		else if(l3 == k) {start = s3; end = e3;return;}
		else if(l2 == k) {start = s2; end = e2;return;}
	}	
}

int main()
{
// Read the input lines, and rule out punctuations and blank 
	ifstream d1("calfflac.in");
	char t;
	string orig,tmp;
	int dist = 'A'-'a';
	while(d1>>noskipws>>t) 
	{ 
		orig.push_back(t);
		if(t>='a'&&t<='z') tmp.push_back(t);
		else if(t>='A'&&t<='Z') tmp.push_back(t - dist);
		
	}

	/*cout<<"after pruning"<<endl;
	for(int i = 0;i<=tmp.size();i++)
		cout<<tmp[i];
	cout<<endl;
	*/
// Deal with tmp string, using divide and conquer to tackle it.
	int start,end;
	find_longest_pal(tmp,0,tmp.size()-1,start,end);
/*
	cout<<"the palindrom"<<endl;
	for(int i = start;i<=end;i++)
		cout<<tmp[i];
	cout<<endl;
*/
/*	int mark1,mark2;
	mark1 = mark2 =0;
	while(mark1<=start)
	{
		if((tmp[mark2]>='a'&&tmp[mark2]<='z' )|| 
			(tmp[mark2]>='A'&&tmp[mark2]<='Z'))
		{
			mark1++;
		}
		mark2++;
	}

*/
	int cursor=0;
	int k_mark,k_st,k_en;
	k_mark = k_st = k_en = 0;
	while(cursor<orig.size())
	{

		if(orig[cursor]>='a'&&orig[cursor]<='z' ||
			orig[cursor]>='A'&&orig[cursor]<='Z')
		{
			if(k_mark==start) k_st=cursor;
			if(k_mark == end) { k_en = cursor; break;}
			k_mark++;
		}
		cursor++;
	}

	//cout<<"k_st="<<k_st<<" k_en="<<k_en<<endl;
/*	
	for(int i=k_st;i<=k_en;i++) 
		cout<<orig[i];
	cout<<endl;
*/
	ofstream d2("calfflac.out");
	d2<<end-start+1<<endl;
	for(int i=k_st;i<=k_en;i++)
	d2<<orig[i];
	d2<<endl;

}

	
